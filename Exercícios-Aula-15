{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNk5wPuIIFr14vboN7WhefT",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Brennerodrigues/ip-2024-01/blob/main/Exerc%C3%ADcios-Aula-15\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "01"
      ],
      "metadata": {
        "id": "mzR2urBEPRm-"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1qh-JaQaPNNH"
      },
      "outputs": [],
      "source": [
        "package main\n",
        "import \"fmt\"\n",
        "\n",
        "func main() {\n",
        "    var n, x int\n",
        "\n",
        "    fmt.Scan(&n, &x)\n",
        "    fmt.Println(elevado(x, n))\n",
        "}\n",
        "func elevado(x, n int) int{\n",
        "    if n==0{\n",
        "        return 1\n",
        "    }\n",
        "    return x*elevado(x, n-1)\n",
        "}"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "02"
      ],
      "metadata": {
        "id": "8QK_S8jranuJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "package main\n",
        "import \"fmt\"\n",
        "\n",
        "func main() {\n",
        "    var tamanho int\n",
        "    fmt.Scan(&tamanho)\n",
        "    seq := make([]int, tamanho)\n",
        "\n",
        "    for x:=0; x<tamanho; x++{\n",
        "        fmt.Scan(&seq[x])\n",
        "    }\n",
        "    fmt.Println(soma(seq))\n",
        "}\n",
        "\n",
        "func soma(seq []int) int{\n",
        "    soma := 0\n",
        "    for _, valor := range seq{\n",
        "        soma= soma + valor\n",
        "    }\n",
        "    return soma\n",
        "}"
      ],
      "metadata": {
        "id": "IVCNbJXYapRR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "03"
      ],
      "metadata": {
        "id": "h4-qa0tudxNN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "package main\n",
        "import \"fmt\"\n",
        "\n",
        "func main() {\n",
        "    var tamanho int\n",
        "    fmt.Scan(&tamanho)\n",
        "    seq := make([]int, tamanho)\n",
        "\n",
        "    for x:=0; x<tamanho; x++{\n",
        "        fmt.Scan(&seq[x])\n",
        "    }\n",
        "    fmt.Println(inverte(seq))\n",
        "}\n",
        "\n",
        "func inverte(seq []int) []int{\n",
        "    tamanho := len(seq)\n",
        "    contrario := make([]int, tamanho)\n",
        "    for i:=0; i < tamanho; i++{\n",
        "        contrario[i] = seq[tamanho-1-i]\n",
        "    }\n",
        "    return contrario\n",
        "}"
      ],
      "metadata": {
        "id": "Wch4k1R8dxek"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "04\n"
      ],
      "metadata": {
        "id": "UYt0Uf_Tk_8i"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "package main\n",
        "\n",
        "import \"fmt\"\n",
        "import \"strconv\"\n",
        "\n",
        "func main() {\n",
        "\tvar numero int\n",
        "\n",
        "\tfmt.Scan(&numero)\n",
        "\tfmt.Println(binario(numero))\n",
        "}\n",
        "\n",
        "func binario(numero int) string {\n",
        "\tif numero == 0 {\n",
        "\t\treturn \"0\"\n",
        "\t}\n",
        "\n",
        "\tvar resultado string\n",
        "\tfor numero > 0 {\n",
        "\t\tdigito := numero % 2\n",
        "\t\tresultado = strconv.Itoa(digito) + resultado\n",
        "\t\tnumero = numero / 2\n",
        "\t}\n",
        "\n",
        "\treturn resultado\n",
        "}"
      ],
      "metadata": {
        "id": "eJLGOmfZlAEw"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}